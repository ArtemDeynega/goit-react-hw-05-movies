{"version":3,"file":"static/js/movie-reviews-lazy.11d91648.chunk.js","mappings":"sLAEaA,E,QAAMC,EAAAA,IAAH,iE,SCDHC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,SAACH,EAAD,UAAMG,M,uLCAFC,EAAWH,EAAAA,EAAAA,GAAH,uGAKRI,EAAOJ,EAAAA,EAAAA,GAAH,6CAGJK,EAAML,EAAAA,EAAAA,IAAH,4D,SCPHM,EAAmB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjC,OACE,+BACE,SAACH,EAAD,UACGG,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,UAACR,EAAD,YACE,0CAAkBQ,MAClB,SAACN,EAAD,CAAKO,IAAKC,EAAUC,IAAI,YACxB,uBAAIJ,MAHSD,WCQzB,EAZqB,WACnB,IAAMF,ECF4B,WAClC,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOV,EAAP,KAAgBW,EAAhB,KACA,GAAqBD,EAAAA,EAAAA,UAAS,MAArBE,GAAT,eAmBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,wGAEhBC,EAAAA,EAAAA,IAAgBP,GAASQ,MAAK,SAAAC,GACV,IAApBA,EAASC,QAGTD,EAASC,OAAS,GACpBP,EAAWM,MAPO,sDAWtBE,QAAQC,IAAI,KAAMC,SAClBT,EAAS,EAAD,IAZc,wDAAH,qDAevBE,MACC,CAACN,IACGR,EDrBSsB,GAChB,OACE,SAAC5B,EAAA,EAAD,UACGM,GACC,SAACD,EAAD,CAAkBC,QAASA,KAE3B,mH,uLEXFuB,EAAQC,EAAAA,MAAAA,QAERC,EACM,gCADNA,EAEC,mCAFDA,EAGE,WAHFA,EAIE,QAJFA,EAKI,SAGJC,EAAWH,EAAMI,OAAO,CAC5BC,QAASH,EACTI,OAAQ,CACNC,QAASL,EACTM,SAAU,WAODC,EAAiB,mCAAG,sGACRN,EAAS,GAAD,OAAID,EAAJ,YAAoBA,EAApB,UADA,uBACvBQ,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAAS,GAAD,OAC1BD,EAD0B,YACRA,EADQ,sCACkCW,IAFpC,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAOfG,EAAe,mCAAG,WAAM7B,GAAN,yFACNkB,EAAS,GAAD,OAAID,EAAJ,YAAoBjB,IADtB,uBACrByB,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAKfK,EAAe,mCAAG,WAAM9B,GAAN,yFACNkB,EAAS,GAAD,OAAID,EAAJ,YAAoBjB,EAApB,aADF,uBACrByB,EADqB,EACrBA,KADqB,kBAGtBA,EAAKM,MAHiB,2CAAH,sDAMfxB,EAAe,mCAAG,WAAMP,GAAN,yFACNkB,EAAS,GAAD,OAAID,EAAJ,YAAoBjB,EAApB,oBADF,uBACrByB,EADqB,EACrBA,KADqB,kBAGtBA,EAAKC,SAHiB,2CAAH,uD","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","view/MovieReviewsCard/MovieReviewsCard.styled.jsx","view/MovieReviewsCard/MovieReviewsCard.jsx","components/MovieReviews/MovieReviews.jsx","hooks/useFetchMovieReviews.js","service/movieApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  max-width: 1200px;\n`;\n","import { Div } from './Container.styled';\nexport const Container = ({ children }) => {\n  return <Div>{children}</Div>;\n};\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  border-bottom: solid black;\n  padding-bottom: 8px;\n  margin-bottom: 14px;\n`;\nexport const Item = styled.ul`\n  margin-top: 20px;\n`;\nexport const Img = styled.img`\n  margin-top: 4px;\n  width: 40px;\n`;\n","import autorImg from 'image/user-anonim.jpeg';\nimport PropTypes from 'prop-types';\nimport { ListItem, Item, Img } from './MovieReviewsCard.styled';\nexport const MovieReviewsCard = ({ reviews }) => {\n  return (\n    <>\n      <Item>\n        {reviews.map(({ id, content, author }) => (\n          <ListItem key={id}>\n            <h4>Author name: {author}</h4>\n            <Img src={autorImg} alt=\"author\" />\n            <p>{content}</p>\n          </ListItem>\n        ))}\n      </Item>\n    </>\n  );\n};\nMovieReviewsCard.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { Container } from 'components/Container';\nimport { useFetchMovieReviews } from 'hooks/useFetchMovieReviews';\n\nimport { MovieReviewsCard } from 'view/MovieReviewsCard';\nconst MovieReviews = () => {\n  const reviews = useFetchMovieReviews();\n  return (\n    <Container>\n      {reviews ? (\n        <MovieReviewsCard reviews={reviews} />\n      ) : (\n        <p>Отзывов еще нет :(</p>\n      )}\n    </Container>\n  );\n};\nexport default MovieReviews;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'service/movieApi';\nexport const useFetchMovieReviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState(null);\n  const [, setError] = useState(null);\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        await getMovieReviews(movieId).then(response => {\n          if (response.length === 0) {\n            return;\n          }\n          if (response.length > 0) {\n            setReviews(response);\n          }\n        });\n      } catch (error) {\n        console.log(error.message);\n        setError(error);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n  return reviews;\n};\n","const axios = require('axios').default;\n\nconst SET_URL = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  KEY: '6ec0852e53b9bedf7516e9964c7fa3f3',\n  HOME: 'trending',\n  PATH: 'movie',\n  SEARCH: 'search',\n};\n\nconst getMovie = axios.create({\n  baseURL: SET_URL.BASE_URL,\n  params: {\n    api_key: SET_URL.KEY,\n    language: 'en-US',\n  },\n});\n\nexport const fetchImage = filePath => {\n  return `https://image.tmdb.org/t/p/w300/${filePath}`;\n};\nexport const getTrendingMovies = async () => {\n  const { data } = await getMovie(`${SET_URL.HOME}/${SET_URL.PATH}/day?`);\n\n  return data.results;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await getMovie(\n    `${SET_URL.SEARCH}/${SET_URL.PATH}?include_adult=false&query=${query}`\n  );\n\n  return data.results;\n};\nexport const getMovieDetails = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}`);\n  // console.log(data);\n  return data;\n};\nexport const getMovieCredits = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}/credits`);\n  //   console.log(data.cast);\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}/reviews?page=1`);\n\n  return data.results;\n};\n"],"names":["Div","styled","Container","children","ListItem","Item","Img","MovieReviewsCard","reviews","map","id","content","author","src","autorImg","alt","movieId","useParams","useState","setReviews","setError","useEffect","fetchMovieReviews","getMovieReviews","then","response","length","console","log","message","useFetchMovieReviews","axios","require","SET_URL","getMovie","create","baseURL","params","api_key","language","getTrendingMovies","data","results","getSearchMovies","query","getMovieDetails","getMovieCredits","cast"],"sourceRoot":""}