{"version":3,"file":"static/js/movie-casts-lazy.824f1005.chunk.js","mappings":"qLAEaA,E,QAAMC,EAAAA,IAAH,iE,SCDHC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,SAACH,EAAD,UAAMG,M,yLCAFC,EAAOH,EAAAA,EAAAA,GAAH,6CAGJI,EAAWJ,EAAAA,EAAAA,GAAH,4HAORK,EAAML,EAAAA,EAAAA,IAAH,wCAGHM,EAAON,EAAAA,EAAAA,EAAH,2F,SCTJO,EAAiB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC/B,OACE,SAACP,EAAA,EAAD,WACE,SAACE,EAAD,UACGK,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACT,UAACR,EAAD,YACE,SAACC,EAAD,CACEQ,IAAKD,EAAY,UARf,oCAQe,OAAgBA,GAAhB,UAAoCE,GACrDC,IAAI,WAEN,SAACT,EAAD,UAAOK,MALMD,WCFzB,EALmB,WACjB,IAAMF,ECFyB,WAC/B,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOV,EAAP,KAAcW,EAAd,KACA,GAAqBD,EAAAA,EAAAA,UAAS,MAArBE,GAAT,eAaA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,wGAEbC,EAAAA,EAAAA,IAAgBP,GAASQ,MAAK,SAAAC,GAAQ,OAAIN,EAASM,MAFtC,sDAInBC,QAAQC,IAAI,KAAMC,SAClBR,EAAS,EAAD,IALW,wDAAH,qDAQpBE,MACC,CAACN,IAEGR,EDdOqB,GAEd,OAAO,8BAAGrB,IAAS,SAACD,EAAD,CAAgBC,MAAOA,Q,uLEPtCsB,EAAQC,EAAAA,MAAAA,QAERC,EACM,gCADNA,EAEC,mCAFDA,EAGE,WAHFA,EAIE,QAJFA,EAKI,SAGJC,EAAWH,EAAMI,OAAO,CAC5BC,QAASH,EACTI,OAAQ,CACNC,QAASL,EACTM,SAAU,WAODC,EAAiB,mCAAG,sGACRN,EAAS,GAAD,OAAID,EAAJ,YAAoBA,EAApB,UADA,uBACvBQ,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAAS,GAAD,OAC1BD,EAD0B,YACRA,EADQ,sCACkCW,IAFpC,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAOfG,EAAe,mCAAG,WAAM5B,GAAN,yFACNiB,EAAS,GAAD,OAAID,EAAJ,YAAoBhB,IADtB,uBACrBwB,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAKfjB,EAAe,mCAAG,WAAMP,GAAN,yFACNiB,EAAS,GAAD,OAAID,EAAJ,YAAoBhB,EAApB,aADF,uBACrBwB,EADqB,EACrBA,KADqB,kBAGtBA,EAAKK,MAHiB,2CAAH,sDAMfC,EAAe,mCAAG,WAAM9B,GAAN,yFACNiB,EAAS,GAAD,OAAID,EAAJ,YAAoBhB,EAApB,oBADF,uBACrBwB,EADqB,EACrBA,KADqB,kBAGtBA,EAAKC,SAHiB,2CAAH,uD","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","view/MovieCastsCard/MovieCastsCard.styled.jsx","view/MovieCastsCard/MovieCastsCard.jsx","components/MovieCasts/MovieCasts.jsx","hooks/useFetchMovieCast.js","service/movieApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Div = styled.div`\n  margin: 0 auto;\n  max-width: 1200px;\n`;\n","import { Div } from './Container.styled';\nexport const Container = ({ children }) => {\n  return <Div>{children}</Div>;\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.ul`\n  margin-top: 20px;\n`;\nexport const ListItem = styled.li`\n  border-bottom: solid black;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: start;\n`;\n\nexport const Img = styled.img`\n  width: 80px;\n`;\nexport const Text = styled.p`\n  margin-left: 20px;\n  margin-top: auto;\n  margin-bottom: auto;\n`;\n","import userAnonim from 'image/user-anonim.jpeg';\nimport PropTypes from 'prop-types';\nimport { Container } from 'components/Container';\nimport { Img, Text, ListItem, Item } from './MovieCastsCard.styled';\n\nconst IMG_API = 'https://image.tmdb.org/t/p/w300/';\nexport const MovieCastsCard = ({ casts }) => {\n  return (\n    <Container>\n      <Item>\n        {casts.map(({ id, name, profile_path }) => (\n          <ListItem key={id}>\n            <Img\n              src={profile_path ? `${IMG_API}${profile_path}` : `${userAnonim}`}\n              alt=\"actor\"\n            />\n            <Text>{name}</Text>\n          </ListItem>\n        ))}\n      </Item>\n    </Container>\n  );\n};\nMovieCastsCard.propTypes = {\n  casts: PropTypes.array.isRequired,\n};\n","import { useFetchMovieCast } from 'hooks/useFetchMovieCast';\n\nimport { MovieCastsCard } from 'view/MovieCastsCard';\n\nconst MovieCasts = () => {\n  const casts = useFetchMovieCast();\n\n  return <>{casts && <MovieCastsCard casts={casts} />}</>;\n};\nexport default MovieCasts;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'service/movieApi';\nexport const useFetchMovieCast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState(null);\n  const [, setError] = useState(null);\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        await getMovieCredits(movieId).then(response => setCasts(response));\n      } catch (error) {\n        console.log(error.message);\n        setError(error);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return casts;\n};\n","const axios = require('axios').default;\n\nconst SET_URL = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  KEY: '6ec0852e53b9bedf7516e9964c7fa3f3',\n  HOME: 'trending',\n  PATH: 'movie',\n  SEARCH: 'search',\n};\n\nconst getMovie = axios.create({\n  baseURL: SET_URL.BASE_URL,\n  params: {\n    api_key: SET_URL.KEY,\n    language: 'en-US',\n  },\n});\n\nexport const fetchImage = filePath => {\n  return `https://image.tmdb.org/t/p/w300/${filePath}`;\n};\nexport const getTrendingMovies = async () => {\n  const { data } = await getMovie(`${SET_URL.HOME}/${SET_URL.PATH}/day?`);\n\n  return data.results;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await getMovie(\n    `${SET_URL.SEARCH}/${SET_URL.PATH}?include_adult=false&query=${query}`\n  );\n\n  return data.results;\n};\nexport const getMovieDetails = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}`);\n  // console.log(data);\n  return data;\n};\nexport const getMovieCredits = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}/credits`);\n  //   console.log(data.cast);\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await getMovie(`${SET_URL.PATH}/${movieId}/reviews?page=1`);\n\n  return data.results;\n};\n"],"names":["Div","styled","Container","children","Item","ListItem","Img","Text","MovieCastsCard","casts","map","id","name","profile_path","src","userAnonim","alt","movieId","useParams","useState","setCasts","setError","useEffect","fetchMovieCast","getMovieCredits","then","response","console","log","message","useFetchMovieCast","axios","require","SET_URL","getMovie","create","baseURL","params","api_key","language","getTrendingMovies","data","results","getSearchMovies","query","getMovieDetails","cast","getMovieReviews"],"sourceRoot":""}